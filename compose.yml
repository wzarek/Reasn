services:
  web:
    build:
      context: Client
      dockerfile: web.Dockerfile
    restart: unless-stopped
    networks:
      - reasn-network
    ports:
      - "${WEB_LISTEN_PORT:-5273}:3000"
    env_file:
      - .env
    depends_on:
      - server

  server:
    build:
      context: Server
      dockerfile: server.Dockerfile
      target: production
    restart: unless-stopped
    networks:
      - reasn-isolated-network
      - reasn-network
    ports:
      - "${SERVER_LISTEN_PORT:-5272}:8080"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
  
  postgres:
    image: postgres:16
    restart: unless-stopped
    networks:
      - reasn-isolated-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./Database/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
      - ./Database/init-constraints.sql:/docker-entrypoint-initdb.d/02-init-constraints.sql
      - ./Database/init-users.sh:/docker-entrypoint-initdb.d/99-init-users.sh
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-postgres}", "-d", "${POSTGRES_DB:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:8.0
    restart: unless-stopped
    networks:
      - reasn-isolated-network
    ports:
      - "${PGADMIN_LISTEN_PORT:-5050}:${PGADMIN_LISTEN_PORT:-80}"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy

networks:
  reasn-isolated-network:
    driver: bridge
  reasn-network:
    driver: bridge

volumes:
  postgres-data:
  pgadmin-data:
